package com.njust.wanyuan_display.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SETTING_INFO".
*/
public class SettingInfoDao extends AbstractDao<SettingInfo, Long> {

    public static final String TABLENAME = "SETTING_INFO";

    /**
     * Properties of entity SettingInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MachineID = new Property(1, String.class, "machineID", false, "MACHINE_ID");
        public final static Property LeftTempState = new Property(2, int.class, "leftTempState", false, "LEFT_TEMP_STATE");
        public final static Property LeftSetTemp = new Property(3, int.class, "leftSetTemp", false, "LEFT_SET_TEMP");
        public final static Property RightTempState = new Property(4, int.class, "rightTempState", false, "RIGHT_TEMP_STATE");
        public final static Property RightSetTemp = new Property(5, int.class, "rightSetTemp", false, "RIGHT_SET_TEMP");
        public final static Property LeftSetLight = new Property(6, String.class, "leftSetLight", false, "LEFT_SET_LIGHT");
        public final static Property LeftLightStartTime = new Property(7, String.class, "leftLightStartTime", false, "LEFT_LIGHT_START_TIME");
        public final static Property LeftLightEndTime = new Property(8, String.class, "leftLightEndTime", false, "LEFT_LIGHT_END_TIME");
        public final static Property RightSetLight = new Property(9, String.class, "rightSetLight", false, "RIGHT_SET_LIGHT");
        public final static Property RightLightStartTime = new Property(10, String.class, "rightLightStartTime", false, "RIGHT_LIGHT_START_TIME");
        public final static Property RightLightEndTime = new Property(11, String.class, "rightLightEndTime", false, "RIGHT_LIGHT_END_TIME");
        public final static Property LeftOutPosition = new Property(12, String.class, "leftOutPosition", false, "LEFT_OUT_POSITION");
        public final static Property LeftFlootPosition = new Property(13, String.class, "leftFlootPosition", false, "LEFT_FLOOT_POSITION");
        public final static Property LeftFlootNo = new Property(14, String.class, "leftFlootNo", false, "LEFT_FLOOT_NO");
        public final static Property RightOutPosition = new Property(15, String.class, "rightOutPosition", false, "RIGHT_OUT_POSITION");
        public final static Property RightFlootPosition = new Property(16, String.class, "rightFlootPosition", false, "RIGHT_FLOOT_POSITION");
        public final static Property RightFlootNo = new Property(17, String.class, "rightFlootNo", false, "RIGHT_FLOOT_NO");
    }


    public SettingInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SettingInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SETTING_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MACHINE_ID\" TEXT," + // 1: machineID
                "\"LEFT_TEMP_STATE\" INTEGER NOT NULL ," + // 2: leftTempState
                "\"LEFT_SET_TEMP\" INTEGER NOT NULL ," + // 3: leftSetTemp
                "\"RIGHT_TEMP_STATE\" INTEGER NOT NULL ," + // 4: rightTempState
                "\"RIGHT_SET_TEMP\" INTEGER NOT NULL ," + // 5: rightSetTemp
                "\"LEFT_SET_LIGHT\" TEXT," + // 6: leftSetLight
                "\"LEFT_LIGHT_START_TIME\" TEXT," + // 7: leftLightStartTime
                "\"LEFT_LIGHT_END_TIME\" TEXT," + // 8: leftLightEndTime
                "\"RIGHT_SET_LIGHT\" TEXT," + // 9: rightSetLight
                "\"RIGHT_LIGHT_START_TIME\" TEXT," + // 10: rightLightStartTime
                "\"RIGHT_LIGHT_END_TIME\" TEXT," + // 11: rightLightEndTime
                "\"LEFT_OUT_POSITION\" TEXT," + // 12: leftOutPosition
                "\"LEFT_FLOOT_POSITION\" TEXT," + // 13: leftFlootPosition
                "\"LEFT_FLOOT_NO\" TEXT," + // 14: leftFlootNo
                "\"RIGHT_OUT_POSITION\" TEXT," + // 15: rightOutPosition
                "\"RIGHT_FLOOT_POSITION\" TEXT," + // 16: rightFlootPosition
                "\"RIGHT_FLOOT_NO\" TEXT);"); // 17: rightFlootNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SETTING_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SettingInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String machineID = entity.getMachineID();
        if (machineID != null) {
            stmt.bindString(2, machineID);
        }
        stmt.bindLong(3, entity.getLeftTempState());
        stmt.bindLong(4, entity.getLeftSetTemp());
        stmt.bindLong(5, entity.getRightTempState());
        stmt.bindLong(6, entity.getRightSetTemp());
 
        String leftSetLight = entity.getLeftSetLight();
        if (leftSetLight != null) {
            stmt.bindString(7, leftSetLight);
        }
 
        String leftLightStartTime = entity.getLeftLightStartTime();
        if (leftLightStartTime != null) {
            stmt.bindString(8, leftLightStartTime);
        }
 
        String leftLightEndTime = entity.getLeftLightEndTime();
        if (leftLightEndTime != null) {
            stmt.bindString(9, leftLightEndTime);
        }
 
        String rightSetLight = entity.getRightSetLight();
        if (rightSetLight != null) {
            stmt.bindString(10, rightSetLight);
        }
 
        String rightLightStartTime = entity.getRightLightStartTime();
        if (rightLightStartTime != null) {
            stmt.bindString(11, rightLightStartTime);
        }
 
        String rightLightEndTime = entity.getRightLightEndTime();
        if (rightLightEndTime != null) {
            stmt.bindString(12, rightLightEndTime);
        }
 
        String leftOutPosition = entity.getLeftOutPosition();
        if (leftOutPosition != null) {
            stmt.bindString(13, leftOutPosition);
        }
 
        String leftFlootPosition = entity.getLeftFlootPosition();
        if (leftFlootPosition != null) {
            stmt.bindString(14, leftFlootPosition);
        }
 
        String leftFlootNo = entity.getLeftFlootNo();
        if (leftFlootNo != null) {
            stmt.bindString(15, leftFlootNo);
        }
 
        String rightOutPosition = entity.getRightOutPosition();
        if (rightOutPosition != null) {
            stmt.bindString(16, rightOutPosition);
        }
 
        String rightFlootPosition = entity.getRightFlootPosition();
        if (rightFlootPosition != null) {
            stmt.bindString(17, rightFlootPosition);
        }
 
        String rightFlootNo = entity.getRightFlootNo();
        if (rightFlootNo != null) {
            stmt.bindString(18, rightFlootNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SettingInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String machineID = entity.getMachineID();
        if (machineID != null) {
            stmt.bindString(2, machineID);
        }
        stmt.bindLong(3, entity.getLeftTempState());
        stmt.bindLong(4, entity.getLeftSetTemp());
        stmt.bindLong(5, entity.getRightTempState());
        stmt.bindLong(6, entity.getRightSetTemp());
 
        String leftSetLight = entity.getLeftSetLight();
        if (leftSetLight != null) {
            stmt.bindString(7, leftSetLight);
        }
 
        String leftLightStartTime = entity.getLeftLightStartTime();
        if (leftLightStartTime != null) {
            stmt.bindString(8, leftLightStartTime);
        }
 
        String leftLightEndTime = entity.getLeftLightEndTime();
        if (leftLightEndTime != null) {
            stmt.bindString(9, leftLightEndTime);
        }
 
        String rightSetLight = entity.getRightSetLight();
        if (rightSetLight != null) {
            stmt.bindString(10, rightSetLight);
        }
 
        String rightLightStartTime = entity.getRightLightStartTime();
        if (rightLightStartTime != null) {
            stmt.bindString(11, rightLightStartTime);
        }
 
        String rightLightEndTime = entity.getRightLightEndTime();
        if (rightLightEndTime != null) {
            stmt.bindString(12, rightLightEndTime);
        }
 
        String leftOutPosition = entity.getLeftOutPosition();
        if (leftOutPosition != null) {
            stmt.bindString(13, leftOutPosition);
        }
 
        String leftFlootPosition = entity.getLeftFlootPosition();
        if (leftFlootPosition != null) {
            stmt.bindString(14, leftFlootPosition);
        }
 
        String leftFlootNo = entity.getLeftFlootNo();
        if (leftFlootNo != null) {
            stmt.bindString(15, leftFlootNo);
        }
 
        String rightOutPosition = entity.getRightOutPosition();
        if (rightOutPosition != null) {
            stmt.bindString(16, rightOutPosition);
        }
 
        String rightFlootPosition = entity.getRightFlootPosition();
        if (rightFlootPosition != null) {
            stmt.bindString(17, rightFlootPosition);
        }
 
        String rightFlootNo = entity.getRightFlootNo();
        if (rightFlootNo != null) {
            stmt.bindString(18, rightFlootNo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SettingInfo readEntity(Cursor cursor, int offset) {
        SettingInfo entity = new SettingInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // machineID
            cursor.getInt(offset + 2), // leftTempState
            cursor.getInt(offset + 3), // leftSetTemp
            cursor.getInt(offset + 4), // rightTempState
            cursor.getInt(offset + 5), // rightSetTemp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // leftSetLight
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // leftLightStartTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // leftLightEndTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // rightSetLight
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // rightLightStartTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // rightLightEndTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // leftOutPosition
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // leftFlootPosition
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // leftFlootNo
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // rightOutPosition
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // rightFlootPosition
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // rightFlootNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SettingInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMachineID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLeftTempState(cursor.getInt(offset + 2));
        entity.setLeftSetTemp(cursor.getInt(offset + 3));
        entity.setRightTempState(cursor.getInt(offset + 4));
        entity.setRightSetTemp(cursor.getInt(offset + 5));
        entity.setLeftSetLight(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLeftLightStartTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLeftLightEndTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRightSetLight(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRightLightStartTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRightLightEndTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLeftOutPosition(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLeftFlootPosition(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLeftFlootNo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRightOutPosition(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRightFlootPosition(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRightFlootNo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SettingInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SettingInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SettingInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
