package com.njust.wanyuan_display.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MACHINE_INFO".
*/
public class MachineInfoDao extends AbstractDao<MachineInfo, Long> {

    public static final String TABLENAME = "MACHINE_INFO";

    /**
     * Properties of entity MachineInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MachineID = new Property(1, String.class, "machineID", false, "MACHINE_ID");
        public final static Property UserID = new Property(2, String.class, "userID", false, "USER_ID");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property UserPassword = new Property(4, String.class, "userPassword", false, "USER_PASSWORD");
        public final static Property LoginName = new Property(5, String.class, "loginName", false, "LOGIN_NAME");
        public final static Property LoginPassword = new Property(6, String.class, "loginPassword", false, "LOGIN_PASSWORD");
        public final static Property Board = new Property(7, String.class, "board", false, "BOARD");
        public final static Property Serial = new Property(8, String.class, "serial", false, "SERIAL");
        public final static Property AndroidVersion = new Property(9, String.class, "androidVersion", false, "ANDROID_VERSION");
        public final static Property Androidsdk = new Property(10, String.class, "androidsdk", false, "ANDROIDSDK");
        public final static Property Version = new Property(11, String.class, "version", false, "VERSION");
        public final static Property Hotline = new Property(12, String.class, "hotline", false, "HOTLINE");
        public final static Property Slogan = new Property(13, String.class, "slogan", false, "SLOGAN");
        public final static Property Create_time = new Property(14, String.class, "create_time", false, "CREATE_TIME");
    }


    public MachineInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MachineInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MACHINE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MACHINE_ID\" TEXT," + // 1: machineID
                "\"USER_ID\" TEXT," + // 2: userID
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"USER_PASSWORD\" TEXT," + // 4: userPassword
                "\"LOGIN_NAME\" TEXT," + // 5: loginName
                "\"LOGIN_PASSWORD\" TEXT," + // 6: loginPassword
                "\"BOARD\" TEXT," + // 7: board
                "\"SERIAL\" TEXT," + // 8: serial
                "\"ANDROID_VERSION\" TEXT," + // 9: androidVersion
                "\"ANDROIDSDK\" TEXT," + // 10: androidsdk
                "\"VERSION\" TEXT," + // 11: version
                "\"HOTLINE\" TEXT," + // 12: hotline
                "\"SLOGAN\" TEXT," + // 13: slogan
                "\"CREATE_TIME\" TEXT);"); // 14: create_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MACHINE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MachineInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String machineID = entity.getMachineID();
        if (machineID != null) {
            stmt.bindString(2, machineID);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(3, userID);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(5, userPassword);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(6, loginName);
        }
 
        String loginPassword = entity.getLoginPassword();
        if (loginPassword != null) {
            stmt.bindString(7, loginPassword);
        }
 
        String board = entity.getBoard();
        if (board != null) {
            stmt.bindString(8, board);
        }
 
        String serial = entity.getSerial();
        if (serial != null) {
            stmt.bindString(9, serial);
        }
 
        String androidVersion = entity.getAndroidVersion();
        if (androidVersion != null) {
            stmt.bindString(10, androidVersion);
        }
 
        String androidsdk = entity.getAndroidsdk();
        if (androidsdk != null) {
            stmt.bindString(11, androidsdk);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(12, version);
        }
 
        String hotline = entity.getHotline();
        if (hotline != null) {
            stmt.bindString(13, hotline);
        }
 
        String slogan = entity.getSlogan();
        if (slogan != null) {
            stmt.bindString(14, slogan);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(15, create_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MachineInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String machineID = entity.getMachineID();
        if (machineID != null) {
            stmt.bindString(2, machineID);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(3, userID);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(5, userPassword);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(6, loginName);
        }
 
        String loginPassword = entity.getLoginPassword();
        if (loginPassword != null) {
            stmt.bindString(7, loginPassword);
        }
 
        String board = entity.getBoard();
        if (board != null) {
            stmt.bindString(8, board);
        }
 
        String serial = entity.getSerial();
        if (serial != null) {
            stmt.bindString(9, serial);
        }
 
        String androidVersion = entity.getAndroidVersion();
        if (androidVersion != null) {
            stmt.bindString(10, androidVersion);
        }
 
        String androidsdk = entity.getAndroidsdk();
        if (androidsdk != null) {
            stmt.bindString(11, androidsdk);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(12, version);
        }
 
        String hotline = entity.getHotline();
        if (hotline != null) {
            stmt.bindString(13, hotline);
        }
 
        String slogan = entity.getSlogan();
        if (slogan != null) {
            stmt.bindString(14, slogan);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(15, create_time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MachineInfo readEntity(Cursor cursor, int offset) {
        MachineInfo entity = new MachineInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // machineID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userPassword
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // loginName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // loginPassword
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // board
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // serial
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // androidVersion
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // androidsdk
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // version
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // hotline
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // slogan
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // create_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MachineInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMachineID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLoginName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLoginPassword(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBoard(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSerial(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAndroidVersion(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAndroidsdk(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVersion(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setHotline(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSlogan(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCreate_time(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MachineInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MachineInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MachineInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
