package com.njust.wanyuan_display.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AISLE_INFO".
*/
public class AisleInfoDao extends AbstractDao<AisleInfo, Long> {

    public static final String TABLENAME = "AISLE_INFO";

    /**
     * Properties of entity AisleInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PositionID = new Property(1, int.class, "positionID", false, "POSITION_ID");
        public final static Property Counter = new Property(2, int.class, "counter", false, "COUNTER");
        public final static Property State = new Property(3, int.class, "state", false, "STATE");
        public final static Property MotorType = new Property(4, int.class, "motorType", false, "MOTOR_TYPE");
        public final static Property Position1 = new Property(5, byte.class, "position1", false, "POSITION1");
        public final static Property Position2 = new Property(6, byte.class, "position2", false, "POSITION2");
        public final static Property Capacity = new Property(7, String.class, "capacity", false, "CAPACITY");
        public final static Property GoodQuantity = new Property(8, String.class, "goodQuantity", false, "GOOD_QUANTITY");
        public final static Property GoodID = new Property(9, int.class, "goodID", false, "GOOD_ID");
        public final static Property GoodName = new Property(10, String.class, "goodName", false, "GOOD_NAME");
        public final static Property GoodTypeID = new Property(11, int.class, "goodTypeID", false, "GOOD_TYPE_ID");
        public final static Property GoodTypeName = new Property(12, String.class, "goodTypeName", false, "GOOD_TYPE_NAME");
        public final static Property GoodDescription = new Property(13, String.class, "goodDescription", false, "GOOD_DESCRIPTION");
        public final static Property GoodPrice = new Property(14, double.class, "goodPrice", false, "GOOD_PRICE");
        public final static Property Promotion = new Property(15, String.class, "promotion", false, "PROMOTION");
        public final static Property PromotionPrice = new Property(16, double.class, "promotionPrice", false, "PROMOTION_PRICE");
        public final static Property GoodsImgUrl = new Property(17, String.class, "goodsImgUrl", false, "GOODS_IMG_URL");
        public final static Property GoodsImgLocalUrl = new Property(18, String.class, "goodsImgLocalUrl", false, "GOODS_IMG_LOCAL_URL");
        public final static Property UpdateTime = new Property(19, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Count = new Property(20, int.class, "count", false, "COUNT");
        public final static Property GoodColdHot = new Property(21, boolean.class, "goodColdHot", false, "GOOD_COLD_HOT");
        public final static Property Temp = new Property(22, String.class, "temp", false, "TEMP");
    }


    public AisleInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AisleInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AISLE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"POSITION_ID\" INTEGER NOT NULL ," + // 1: positionID
                "\"COUNTER\" INTEGER NOT NULL ," + // 2: counter
                "\"STATE\" INTEGER NOT NULL ," + // 3: state
                "\"MOTOR_TYPE\" INTEGER NOT NULL ," + // 4: motorType
                "\"POSITION1\" INTEGER NOT NULL ," + // 5: position1
                "\"POSITION2\" INTEGER NOT NULL ," + // 6: position2
                "\"CAPACITY\" TEXT," + // 7: capacity
                "\"GOOD_QUANTITY\" TEXT," + // 8: goodQuantity
                "\"GOOD_ID\" INTEGER NOT NULL ," + // 9: goodID
                "\"GOOD_NAME\" TEXT," + // 10: goodName
                "\"GOOD_TYPE_ID\" INTEGER NOT NULL ," + // 11: goodTypeID
                "\"GOOD_TYPE_NAME\" TEXT," + // 12: goodTypeName
                "\"GOOD_DESCRIPTION\" TEXT," + // 13: goodDescription
                "\"GOOD_PRICE\" REAL NOT NULL ," + // 14: goodPrice
                "\"PROMOTION\" TEXT," + // 15: promotion
                "\"PROMOTION_PRICE\" REAL NOT NULL ," + // 16: promotionPrice
                "\"GOODS_IMG_URL\" TEXT," + // 17: goodsImgUrl
                "\"GOODS_IMG_LOCAL_URL\" TEXT," + // 18: goodsImgLocalUrl
                "\"UPDATE_TIME\" TEXT," + // 19: updateTime
                "\"COUNT\" INTEGER NOT NULL ," + // 20: count
                "\"GOOD_COLD_HOT\" INTEGER NOT NULL ," + // 21: goodColdHot
                "\"TEMP\" TEXT);"); // 22: temp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AISLE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AisleInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPositionID());
        stmt.bindLong(3, entity.getCounter());
        stmt.bindLong(4, entity.getState());
        stmt.bindLong(5, entity.getMotorType());
        stmt.bindLong(6, entity.getPosition1());
        stmt.bindLong(7, entity.getPosition2());
 
        String capacity = entity.getCapacity();
        if (capacity != null) {
            stmt.bindString(8, capacity);
        }
 
        String goodQuantity = entity.getGoodQuantity();
        if (goodQuantity != null) {
            stmt.bindString(9, goodQuantity);
        }
        stmt.bindLong(10, entity.getGoodID());
 
        String goodName = entity.getGoodName();
        if (goodName != null) {
            stmt.bindString(11, goodName);
        }
        stmt.bindLong(12, entity.getGoodTypeID());
 
        String goodTypeName = entity.getGoodTypeName();
        if (goodTypeName != null) {
            stmt.bindString(13, goodTypeName);
        }
 
        String goodDescription = entity.getGoodDescription();
        if (goodDescription != null) {
            stmt.bindString(14, goodDescription);
        }
        stmt.bindDouble(15, entity.getGoodPrice());
 
        String promotion = entity.getPromotion();
        if (promotion != null) {
            stmt.bindString(16, promotion);
        }
        stmt.bindDouble(17, entity.getPromotionPrice());
 
        String goodsImgUrl = entity.getGoodsImgUrl();
        if (goodsImgUrl != null) {
            stmt.bindString(18, goodsImgUrl);
        }
 
        String goodsImgLocalUrl = entity.getGoodsImgLocalUrl();
        if (goodsImgLocalUrl != null) {
            stmt.bindString(19, goodsImgLocalUrl);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(20, updateTime);
        }
        stmt.bindLong(21, entity.getCount());
        stmt.bindLong(22, entity.getGoodColdHot() ? 1L: 0L);
 
        String temp = entity.getTemp();
        if (temp != null) {
            stmt.bindString(23, temp);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AisleInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPositionID());
        stmt.bindLong(3, entity.getCounter());
        stmt.bindLong(4, entity.getState());
        stmt.bindLong(5, entity.getMotorType());
        stmt.bindLong(6, entity.getPosition1());
        stmt.bindLong(7, entity.getPosition2());
 
        String capacity = entity.getCapacity();
        if (capacity != null) {
            stmt.bindString(8, capacity);
        }
 
        String goodQuantity = entity.getGoodQuantity();
        if (goodQuantity != null) {
            stmt.bindString(9, goodQuantity);
        }
        stmt.bindLong(10, entity.getGoodID());
 
        String goodName = entity.getGoodName();
        if (goodName != null) {
            stmt.bindString(11, goodName);
        }
        stmt.bindLong(12, entity.getGoodTypeID());
 
        String goodTypeName = entity.getGoodTypeName();
        if (goodTypeName != null) {
            stmt.bindString(13, goodTypeName);
        }
 
        String goodDescription = entity.getGoodDescription();
        if (goodDescription != null) {
            stmt.bindString(14, goodDescription);
        }
        stmt.bindDouble(15, entity.getGoodPrice());
 
        String promotion = entity.getPromotion();
        if (promotion != null) {
            stmt.bindString(16, promotion);
        }
        stmt.bindDouble(17, entity.getPromotionPrice());
 
        String goodsImgUrl = entity.getGoodsImgUrl();
        if (goodsImgUrl != null) {
            stmt.bindString(18, goodsImgUrl);
        }
 
        String goodsImgLocalUrl = entity.getGoodsImgLocalUrl();
        if (goodsImgLocalUrl != null) {
            stmt.bindString(19, goodsImgLocalUrl);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(20, updateTime);
        }
        stmt.bindLong(21, entity.getCount());
        stmt.bindLong(22, entity.getGoodColdHot() ? 1L: 0L);
 
        String temp = entity.getTemp();
        if (temp != null) {
            stmt.bindString(23, temp);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AisleInfo readEntity(Cursor cursor, int offset) {
        AisleInfo entity = new AisleInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // positionID
            cursor.getInt(offset + 2), // counter
            cursor.getInt(offset + 3), // state
            cursor.getInt(offset + 4), // motorType
            (byte) cursor.getShort(offset + 5), // position1
            (byte) cursor.getShort(offset + 6), // position2
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // capacity
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // goodQuantity
            cursor.getInt(offset + 9), // goodID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // goodName
            cursor.getInt(offset + 11), // goodTypeID
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // goodTypeName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // goodDescription
            cursor.getDouble(offset + 14), // goodPrice
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // promotion
            cursor.getDouble(offset + 16), // promotionPrice
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // goodsImgUrl
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // goodsImgLocalUrl
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // updateTime
            cursor.getInt(offset + 20), // count
            cursor.getShort(offset + 21) != 0, // goodColdHot
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // temp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AisleInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPositionID(cursor.getInt(offset + 1));
        entity.setCounter(cursor.getInt(offset + 2));
        entity.setState(cursor.getInt(offset + 3));
        entity.setMotorType(cursor.getInt(offset + 4));
        entity.setPosition1((byte) cursor.getShort(offset + 5));
        entity.setPosition2((byte) cursor.getShort(offset + 6));
        entity.setCapacity(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGoodQuantity(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGoodID(cursor.getInt(offset + 9));
        entity.setGoodName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGoodTypeID(cursor.getInt(offset + 11));
        entity.setGoodTypeName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGoodDescription(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setGoodPrice(cursor.getDouble(offset + 14));
        entity.setPromotion(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPromotionPrice(cursor.getDouble(offset + 16));
        entity.setGoodsImgUrl(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setGoodsImgLocalUrl(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUpdateTime(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCount(cursor.getInt(offset + 20));
        entity.setGoodColdHot(cursor.getShort(offset + 21) != 0);
        entity.setTemp(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AisleInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AisleInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AisleInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
