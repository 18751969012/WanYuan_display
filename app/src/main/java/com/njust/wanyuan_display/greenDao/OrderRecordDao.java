package com.njust.wanyuan_display.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_RECORD".
*/
public class OrderRecordDao extends AbstractDao<OrderRecord, Long> {

    public static final String TABLENAME = "ORDER_RECORD";

    /**
     * Properties of entity OrderRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SysorderNo = new Property(1, String.class, "sysorderNo", false, "SYSORDER_NO");
        public final static Property PayType = new Property(2, String.class, "payType", false, "PAY_TYPE");
        public final static Property GoodID = new Property(3, String.class, "goodID", false, "GOOD_ID");
        public final static Property GoodName = new Property(4, String.class, "goodName", false, "GOOD_NAME");
        public final static Property GoodPrice = new Property(5, String.class, "goodPrice", false, "GOOD_PRICE");
        public final static Property GoodQuantity = new Property(6, String.class, "goodQuantity", false, "GOOD_QUANTITY");
        public final static Property GoodCounter = new Property(7, String.class, "goodCounter", false, "GOOD_COUNTER");
        public final static Property ChannelNo = new Property(8, String.class, "channelNo", false, "CHANNEL_NO");
        public final static Property Status = new Property(9, String.class, "status", false, "STATUS");
        public final static Property OrderTime = new Property(10, String.class, "orderTime", false, "ORDER_TIME");
        public final static Property PaymentTime = new Property(11, String.class, "paymentTime", false, "PAYMENT_TIME");
    }


    public OrderRecordDao(DaoConfig config) {
        super(config);
    }
    
    public OrderRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SYSORDER_NO\" TEXT," + // 1: sysorderNo
                "\"PAY_TYPE\" TEXT," + // 2: payType
                "\"GOOD_ID\" TEXT," + // 3: goodID
                "\"GOOD_NAME\" TEXT," + // 4: goodName
                "\"GOOD_PRICE\" TEXT," + // 5: goodPrice
                "\"GOOD_QUANTITY\" TEXT," + // 6: goodQuantity
                "\"GOOD_COUNTER\" TEXT," + // 7: goodCounter
                "\"CHANNEL_NO\" TEXT," + // 8: channelNo
                "\"STATUS\" TEXT," + // 9: status
                "\"ORDER_TIME\" TEXT," + // 10: orderTime
                "\"PAYMENT_TIME\" TEXT);"); // 11: paymentTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sysorderNo = entity.getSysorderNo();
        if (sysorderNo != null) {
            stmt.bindString(2, sysorderNo);
        }
 
        String payType = entity.getPayType();
        if (payType != null) {
            stmt.bindString(3, payType);
        }
 
        String goodID = entity.getGoodID();
        if (goodID != null) {
            stmt.bindString(4, goodID);
        }
 
        String goodName = entity.getGoodName();
        if (goodName != null) {
            stmt.bindString(5, goodName);
        }
 
        String goodPrice = entity.getGoodPrice();
        if (goodPrice != null) {
            stmt.bindString(6, goodPrice);
        }
 
        String goodQuantity = entity.getGoodQuantity();
        if (goodQuantity != null) {
            stmt.bindString(7, goodQuantity);
        }
 
        String goodCounter = entity.getGoodCounter();
        if (goodCounter != null) {
            stmt.bindString(8, goodCounter);
        }
 
        String channelNo = entity.getChannelNo();
        if (channelNo != null) {
            stmt.bindString(9, channelNo);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        String orderTime = entity.getOrderTime();
        if (orderTime != null) {
            stmt.bindString(11, orderTime);
        }
 
        String paymentTime = entity.getPaymentTime();
        if (paymentTime != null) {
            stmt.bindString(12, paymentTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sysorderNo = entity.getSysorderNo();
        if (sysorderNo != null) {
            stmt.bindString(2, sysorderNo);
        }
 
        String payType = entity.getPayType();
        if (payType != null) {
            stmt.bindString(3, payType);
        }
 
        String goodID = entity.getGoodID();
        if (goodID != null) {
            stmt.bindString(4, goodID);
        }
 
        String goodName = entity.getGoodName();
        if (goodName != null) {
            stmt.bindString(5, goodName);
        }
 
        String goodPrice = entity.getGoodPrice();
        if (goodPrice != null) {
            stmt.bindString(6, goodPrice);
        }
 
        String goodQuantity = entity.getGoodQuantity();
        if (goodQuantity != null) {
            stmt.bindString(7, goodQuantity);
        }
 
        String goodCounter = entity.getGoodCounter();
        if (goodCounter != null) {
            stmt.bindString(8, goodCounter);
        }
 
        String channelNo = entity.getChannelNo();
        if (channelNo != null) {
            stmt.bindString(9, channelNo);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        String orderTime = entity.getOrderTime();
        if (orderTime != null) {
            stmt.bindString(11, orderTime);
        }
 
        String paymentTime = entity.getPaymentTime();
        if (paymentTime != null) {
            stmt.bindString(12, paymentTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OrderRecord readEntity(Cursor cursor, int offset) {
        OrderRecord entity = new OrderRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sysorderNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // payType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // goodID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // goodName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // goodPrice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // goodQuantity
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // goodCounter
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // channelNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // orderTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // paymentTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSysorderNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPayType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGoodID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGoodName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGoodPrice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGoodQuantity(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGoodCounter(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setChannelNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOrderTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPaymentTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrderRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrderRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrderRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
