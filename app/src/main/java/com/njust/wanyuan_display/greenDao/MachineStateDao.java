package com.njust.wanyuan_display.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MACHINE_STATE".
*/
public class MachineStateDao extends AbstractDao<MachineState, Long> {

    public static final String TABLENAME = "MACHINE_STATE";

    /**
     * Properties of entity MachineState.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MachineID = new Property(1, String.class, "machineID", false, "MACHINE_ID");
        public final static Property VmState = new Property(2, int.class, "vmState", false, "VM_STATE");
        public final static Property LeftState = new Property(3, int.class, "leftState", false, "LEFT_STATE");
        public final static Property RightState = new Property(4, int.class, "rightState", false, "RIGHT_STATE");
        public final static Property LeftCabinetTemp = new Property(5, int.class, "leftCabinetTemp", false, "LEFT_CABINET_TEMP");
        public final static Property LeftCabinetTopTemp = new Property(6, int.class, "leftCabinetTopTemp", false, "LEFT_CABINET_TOP_TEMP");
        public final static Property LeftCompressorTemp = new Property(7, int.class, "leftCompressorTemp", false, "LEFT_COMPRESSOR_TEMP");
        public final static Property LeftCompressorDCfanState = new Property(8, int.class, "leftCompressorDCfanState", false, "LEFT_COMPRESSOR_DCFAN_STATE");
        public final static Property LeftCabinetDCfanState = new Property(9, int.class, "leftCabinetDCfanState", false, "LEFT_CABINET_DCFAN_STATE");
        public final static Property LeftOutCabinetTemp = new Property(10, int.class, "leftOutCabinetTemp", false, "LEFT_OUT_CABINET_TEMP");
        public final static Property LeftDoorheat = new Property(11, int.class, "leftDoorheat", false, "LEFT_DOORHEAT");
        public final static Property LeftHumidity = new Property(12, int.class, "leftHumidity", false, "LEFT_HUMIDITY");
        public final static Property LeftLight = new Property(13, int.class, "leftLight", false, "LEFT_LIGHT");
        public final static Property LeftPushGoodsRaster = new Property(14, int.class, "leftPushGoodsRaster", false, "LEFT_PUSH_GOODS_RASTER");
        public final static Property LeftOutGoodsRaster = new Property(15, int.class, "leftOutGoodsRaster", false, "LEFT_OUT_GOODS_RASTER");
        public final static Property LeftOutGoodsDoor = new Property(16, int.class, "leftOutGoodsDoor", false, "LEFT_OUT_GOODS_DOOR");
        public final static Property RightCabinetTemp = new Property(17, int.class, "rightCabinetTemp", false, "RIGHT_CABINET_TEMP");
        public final static Property RightCabinetTopTemp = new Property(18, int.class, "rightCabinetTopTemp", false, "RIGHT_CABINET_TOP_TEMP");
        public final static Property RightCompressorTemp = new Property(19, int.class, "rightCompressorTemp", false, "RIGHT_COMPRESSOR_TEMP");
        public final static Property RightCompressorDCfanState = new Property(20, int.class, "rightCompressorDCfanState", false, "RIGHT_COMPRESSOR_DCFAN_STATE");
        public final static Property RightCabinetDCfanState = new Property(21, int.class, "rightCabinetDCfanState", false, "RIGHT_CABINET_DCFAN_STATE");
        public final static Property RightOutCabinetTemp = new Property(22, int.class, "rightOutCabinetTemp", false, "RIGHT_OUT_CABINET_TEMP");
        public final static Property RightDoorheat = new Property(23, int.class, "rightDoorheat", false, "RIGHT_DOORHEAT");
        public final static Property RightHumidity = new Property(24, int.class, "rightHumidity", false, "RIGHT_HUMIDITY");
        public final static Property RightLight = new Property(25, int.class, "rightLight", false, "RIGHT_LIGHT");
        public final static Property RightPushGoodsRaster = new Property(26, int.class, "rightPushGoodsRaster", false, "RIGHT_PUSH_GOODS_RASTER");
        public final static Property RightOutGoodsRaster = new Property(27, int.class, "rightOutGoodsRaster", false, "RIGHT_OUT_GOODS_RASTER");
        public final static Property RightOutGoodsDoor = new Property(28, int.class, "rightOutGoodsDoor", false, "RIGHT_OUT_GOODS_DOOR");
        public final static Property MidLight = new Property(29, int.class, "midLight", false, "MID_LIGHT");
        public final static Property MidDoorLock = new Property(30, int.class, "midDoorLock", false, "MID_DOOR_LOCK");
        public final static Property MidDoor = new Property(31, int.class, "midDoor", false, "MID_DOOR");
        public final static Property MidGetGoodsRaster = new Property(32, int.class, "midGetGoodsRaster", false, "MID_GET_GOODS_RASTER");
        public final static Property MidDropGoodsRaster = new Property(33, int.class, "midDropGoodsRaster", false, "MID_DROP_GOODS_RASTER");
        public final static Property MidAntiPinchHandRaster = new Property(34, int.class, "midAntiPinchHandRaster", false, "MID_ANTI_PINCH_HAND_RASTER");
        public final static Property MidGetDoor = new Property(35, int.class, "midGetDoor", false, "MID_GET_DOOR");
        public final static Property MidDropDoor = new Property(36, int.class, "midDropDoor", false, "MID_DROP_DOOR");
        public final static Property LeftTempControlAlternatPower = new Property(37, int.class, "leftTempControlAlternatPower", false, "LEFT_TEMP_CONTROL_ALTERNAT_POWER");
        public final static Property LeftRefrigerationCompressorState = new Property(38, int.class, "leftRefrigerationCompressorState", false, "LEFT_REFRIGERATION_COMPRESSOR_STATE");
        public final static Property LeftCompressorFanState = new Property(39, int.class, "leftCompressorFanState", false, "LEFT_COMPRESSOR_FAN_STATE");
        public final static Property LeftHeatingWireState = new Property(40, int.class, "leftHeatingWireState", false, "LEFT_HEATING_WIRE_STATE");
        public final static Property LeftRecirculatAirFanState = new Property(41, int.class, "leftRecirculatAirFanState", false, "LEFT_RECIRCULAT_AIR_FAN_STATE");
        public final static Property LeftLiftPlatformDownSwitch = new Property(42, int.class, "leftLiftPlatformDownSwitch", false, "LEFT_LIFT_PLATFORM_DOWN_SWITCH");
        public final static Property LeftLiftPlatformUpSwitch = new Property(43, int.class, "leftLiftPlatformUpSwitch", false, "LEFT_LIFT_PLATFORM_UP_SWITCH");
        public final static Property LeftLiftPlatformOutGoodsSwitch = new Property(44, int.class, "leftLiftPlatformOutGoodsSwitch", false, "LEFT_LIFT_PLATFORM_OUT_GOODS_SWITCH");
        public final static Property LeftOutGoodsRasterImmediately = new Property(45, int.class, "leftOutGoodsRasterImmediately", false, "LEFT_OUT_GOODS_RASTER_IMMEDIATELY");
        public final static Property LeftPushGoodsRasterImmediately = new Property(46, int.class, "leftPushGoodsRasterImmediately", false, "LEFT_PUSH_GOODS_RASTER_IMMEDIATELY");
        public final static Property LeftMotorFeedbackState1 = new Property(47, int.class, "leftMotorFeedbackState1", false, "LEFT_MOTOR_FEEDBACK_STATE1");
        public final static Property LeftMotorFeedbackState2 = new Property(48, int.class, "leftMotorFeedbackState2", false, "LEFT_MOTOR_FEEDBACK_STATE2");
        public final static Property LeftOutGoodsDoorDownSwitch = new Property(49, int.class, "leftOutGoodsDoorDownSwitch", false, "LEFT_OUT_GOODS_DOOR_DOWN_SWITCH");
        public final static Property LeftOutGoodsDoorUpSwitch = new Property(50, int.class, "leftOutGoodsDoorUpSwitch", false, "LEFT_OUT_GOODS_DOOR_UP_SWITCH");
        public final static Property RightTempControlAlternatPower = new Property(51, int.class, "rightTempControlAlternatPower", false, "RIGHT_TEMP_CONTROL_ALTERNAT_POWER");
        public final static Property RightRefrigerationCompressorState = new Property(52, int.class, "rightRefrigerationCompressorState", false, "RIGHT_REFRIGERATION_COMPRESSOR_STATE");
        public final static Property RightCompressorFanState = new Property(53, int.class, "rightCompressorFanState", false, "RIGHT_COMPRESSOR_FAN_STATE");
        public final static Property RightHeatingWireState = new Property(54, int.class, "rightHeatingWireState", false, "RIGHT_HEATING_WIRE_STATE");
        public final static Property RightRecirculatAirFanState = new Property(55, int.class, "rightRecirculatAirFanState", false, "RIGHT_RECIRCULAT_AIR_FAN_STATE");
        public final static Property RightLiftPlatformDownSwitch = new Property(56, int.class, "rightLiftPlatformDownSwitch", false, "RIGHT_LIFT_PLATFORM_DOWN_SWITCH");
        public final static Property RightLiftPlatformUpSwitch = new Property(57, int.class, "rightLiftPlatformUpSwitch", false, "RIGHT_LIFT_PLATFORM_UP_SWITCH");
        public final static Property RightLiftPlatformOutGoodsSwitch = new Property(58, int.class, "rightLiftPlatformOutGoodsSwitch", false, "RIGHT_LIFT_PLATFORM_OUT_GOODS_SWITCH");
        public final static Property RightOutGoodsRasterImmediately = new Property(59, int.class, "rightOutGoodsRasterImmediately", false, "RIGHT_OUT_GOODS_RASTER_IMMEDIATELY");
        public final static Property RightPushGoodsRasterImmediately = new Property(60, int.class, "rightPushGoodsRasterImmediately", false, "RIGHT_PUSH_GOODS_RASTER_IMMEDIATELY");
        public final static Property RightMotorFeedbackState1 = new Property(61, int.class, "rightMotorFeedbackState1", false, "RIGHT_MOTOR_FEEDBACK_STATE1");
        public final static Property RightMotorFeedbackState2 = new Property(62, int.class, "rightMotorFeedbackState2", false, "RIGHT_MOTOR_FEEDBACK_STATE2");
        public final static Property RightOutGoodsDoorDownSwitch = new Property(63, int.class, "rightOutGoodsDoorDownSwitch", false, "RIGHT_OUT_GOODS_DOOR_DOWN_SWITCH");
        public final static Property RightOutGoodsDoorUpSwitch = new Property(64, int.class, "rightOutGoodsDoorUpSwitch", false, "RIGHT_OUT_GOODS_DOOR_UP_SWITCH");
        public final static Property MidGetDoorWaitClose = new Property(65, int.class, "midGetDoorWaitClose", false, "MID_GET_DOOR_WAIT_CLOSE");
        public final static Property MidGetDoorDownSwitch = new Property(66, int.class, "midGetDoorDownSwitch", false, "MID_GET_DOOR_DOWN_SWITCH");
        public final static Property MidGetDoorUpSwitch = new Property(67, int.class, "midGetDoorUpSwitch", false, "MID_GET_DOOR_UP_SWITCH");
        public final static Property MidDropDoorDownSwitch = new Property(68, int.class, "midDropDoorDownSwitch", false, "MID_DROP_DOOR_DOWN_SWITCH");
        public final static Property MidDropDoorUpSwitch = new Property(69, int.class, "midDropDoorUpSwitch", false, "MID_DROP_DOOR_UP_SWITCH");
    }


    public MachineStateDao(DaoConfig config) {
        super(config);
    }
    
    public MachineStateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MACHINE_STATE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MACHINE_ID\" TEXT," + // 1: machineID
                "\"VM_STATE\" INTEGER NOT NULL ," + // 2: vmState
                "\"LEFT_STATE\" INTEGER NOT NULL ," + // 3: leftState
                "\"RIGHT_STATE\" INTEGER NOT NULL ," + // 4: rightState
                "\"LEFT_CABINET_TEMP\" INTEGER NOT NULL ," + // 5: leftCabinetTemp
                "\"LEFT_CABINET_TOP_TEMP\" INTEGER NOT NULL ," + // 6: leftCabinetTopTemp
                "\"LEFT_COMPRESSOR_TEMP\" INTEGER NOT NULL ," + // 7: leftCompressorTemp
                "\"LEFT_COMPRESSOR_DCFAN_STATE\" INTEGER NOT NULL ," + // 8: leftCompressorDCfanState
                "\"LEFT_CABINET_DCFAN_STATE\" INTEGER NOT NULL ," + // 9: leftCabinetDCfanState
                "\"LEFT_OUT_CABINET_TEMP\" INTEGER NOT NULL ," + // 10: leftOutCabinetTemp
                "\"LEFT_DOORHEAT\" INTEGER NOT NULL ," + // 11: leftDoorheat
                "\"LEFT_HUMIDITY\" INTEGER NOT NULL ," + // 12: leftHumidity
                "\"LEFT_LIGHT\" INTEGER NOT NULL ," + // 13: leftLight
                "\"LEFT_PUSH_GOODS_RASTER\" INTEGER NOT NULL ," + // 14: leftPushGoodsRaster
                "\"LEFT_OUT_GOODS_RASTER\" INTEGER NOT NULL ," + // 15: leftOutGoodsRaster
                "\"LEFT_OUT_GOODS_DOOR\" INTEGER NOT NULL ," + // 16: leftOutGoodsDoor
                "\"RIGHT_CABINET_TEMP\" INTEGER NOT NULL ," + // 17: rightCabinetTemp
                "\"RIGHT_CABINET_TOP_TEMP\" INTEGER NOT NULL ," + // 18: rightCabinetTopTemp
                "\"RIGHT_COMPRESSOR_TEMP\" INTEGER NOT NULL ," + // 19: rightCompressorTemp
                "\"RIGHT_COMPRESSOR_DCFAN_STATE\" INTEGER NOT NULL ," + // 20: rightCompressorDCfanState
                "\"RIGHT_CABINET_DCFAN_STATE\" INTEGER NOT NULL ," + // 21: rightCabinetDCfanState
                "\"RIGHT_OUT_CABINET_TEMP\" INTEGER NOT NULL ," + // 22: rightOutCabinetTemp
                "\"RIGHT_DOORHEAT\" INTEGER NOT NULL ," + // 23: rightDoorheat
                "\"RIGHT_HUMIDITY\" INTEGER NOT NULL ," + // 24: rightHumidity
                "\"RIGHT_LIGHT\" INTEGER NOT NULL ," + // 25: rightLight
                "\"RIGHT_PUSH_GOODS_RASTER\" INTEGER NOT NULL ," + // 26: rightPushGoodsRaster
                "\"RIGHT_OUT_GOODS_RASTER\" INTEGER NOT NULL ," + // 27: rightOutGoodsRaster
                "\"RIGHT_OUT_GOODS_DOOR\" INTEGER NOT NULL ," + // 28: rightOutGoodsDoor
                "\"MID_LIGHT\" INTEGER NOT NULL ," + // 29: midLight
                "\"MID_DOOR_LOCK\" INTEGER NOT NULL ," + // 30: midDoorLock
                "\"MID_DOOR\" INTEGER NOT NULL ," + // 31: midDoor
                "\"MID_GET_GOODS_RASTER\" INTEGER NOT NULL ," + // 32: midGetGoodsRaster
                "\"MID_DROP_GOODS_RASTER\" INTEGER NOT NULL ," + // 33: midDropGoodsRaster
                "\"MID_ANTI_PINCH_HAND_RASTER\" INTEGER NOT NULL ," + // 34: midAntiPinchHandRaster
                "\"MID_GET_DOOR\" INTEGER NOT NULL ," + // 35: midGetDoor
                "\"MID_DROP_DOOR\" INTEGER NOT NULL ," + // 36: midDropDoor
                "\"LEFT_TEMP_CONTROL_ALTERNAT_POWER\" INTEGER NOT NULL ," + // 37: leftTempControlAlternatPower
                "\"LEFT_REFRIGERATION_COMPRESSOR_STATE\" INTEGER NOT NULL ," + // 38: leftRefrigerationCompressorState
                "\"LEFT_COMPRESSOR_FAN_STATE\" INTEGER NOT NULL ," + // 39: leftCompressorFanState
                "\"LEFT_HEATING_WIRE_STATE\" INTEGER NOT NULL ," + // 40: leftHeatingWireState
                "\"LEFT_RECIRCULAT_AIR_FAN_STATE\" INTEGER NOT NULL ," + // 41: leftRecirculatAirFanState
                "\"LEFT_LIFT_PLATFORM_DOWN_SWITCH\" INTEGER NOT NULL ," + // 42: leftLiftPlatformDownSwitch
                "\"LEFT_LIFT_PLATFORM_UP_SWITCH\" INTEGER NOT NULL ," + // 43: leftLiftPlatformUpSwitch
                "\"LEFT_LIFT_PLATFORM_OUT_GOODS_SWITCH\" INTEGER NOT NULL ," + // 44: leftLiftPlatformOutGoodsSwitch
                "\"LEFT_OUT_GOODS_RASTER_IMMEDIATELY\" INTEGER NOT NULL ," + // 45: leftOutGoodsRasterImmediately
                "\"LEFT_PUSH_GOODS_RASTER_IMMEDIATELY\" INTEGER NOT NULL ," + // 46: leftPushGoodsRasterImmediately
                "\"LEFT_MOTOR_FEEDBACK_STATE1\" INTEGER NOT NULL ," + // 47: leftMotorFeedbackState1
                "\"LEFT_MOTOR_FEEDBACK_STATE2\" INTEGER NOT NULL ," + // 48: leftMotorFeedbackState2
                "\"LEFT_OUT_GOODS_DOOR_DOWN_SWITCH\" INTEGER NOT NULL ," + // 49: leftOutGoodsDoorDownSwitch
                "\"LEFT_OUT_GOODS_DOOR_UP_SWITCH\" INTEGER NOT NULL ," + // 50: leftOutGoodsDoorUpSwitch
                "\"RIGHT_TEMP_CONTROL_ALTERNAT_POWER\" INTEGER NOT NULL ," + // 51: rightTempControlAlternatPower
                "\"RIGHT_REFRIGERATION_COMPRESSOR_STATE\" INTEGER NOT NULL ," + // 52: rightRefrigerationCompressorState
                "\"RIGHT_COMPRESSOR_FAN_STATE\" INTEGER NOT NULL ," + // 53: rightCompressorFanState
                "\"RIGHT_HEATING_WIRE_STATE\" INTEGER NOT NULL ," + // 54: rightHeatingWireState
                "\"RIGHT_RECIRCULAT_AIR_FAN_STATE\" INTEGER NOT NULL ," + // 55: rightRecirculatAirFanState
                "\"RIGHT_LIFT_PLATFORM_DOWN_SWITCH\" INTEGER NOT NULL ," + // 56: rightLiftPlatformDownSwitch
                "\"RIGHT_LIFT_PLATFORM_UP_SWITCH\" INTEGER NOT NULL ," + // 57: rightLiftPlatformUpSwitch
                "\"RIGHT_LIFT_PLATFORM_OUT_GOODS_SWITCH\" INTEGER NOT NULL ," + // 58: rightLiftPlatformOutGoodsSwitch
                "\"RIGHT_OUT_GOODS_RASTER_IMMEDIATELY\" INTEGER NOT NULL ," + // 59: rightOutGoodsRasterImmediately
                "\"RIGHT_PUSH_GOODS_RASTER_IMMEDIATELY\" INTEGER NOT NULL ," + // 60: rightPushGoodsRasterImmediately
                "\"RIGHT_MOTOR_FEEDBACK_STATE1\" INTEGER NOT NULL ," + // 61: rightMotorFeedbackState1
                "\"RIGHT_MOTOR_FEEDBACK_STATE2\" INTEGER NOT NULL ," + // 62: rightMotorFeedbackState2
                "\"RIGHT_OUT_GOODS_DOOR_DOWN_SWITCH\" INTEGER NOT NULL ," + // 63: rightOutGoodsDoorDownSwitch
                "\"RIGHT_OUT_GOODS_DOOR_UP_SWITCH\" INTEGER NOT NULL ," + // 64: rightOutGoodsDoorUpSwitch
                "\"MID_GET_DOOR_WAIT_CLOSE\" INTEGER NOT NULL ," + // 65: midGetDoorWaitClose
                "\"MID_GET_DOOR_DOWN_SWITCH\" INTEGER NOT NULL ," + // 66: midGetDoorDownSwitch
                "\"MID_GET_DOOR_UP_SWITCH\" INTEGER NOT NULL ," + // 67: midGetDoorUpSwitch
                "\"MID_DROP_DOOR_DOWN_SWITCH\" INTEGER NOT NULL ," + // 68: midDropDoorDownSwitch
                "\"MID_DROP_DOOR_UP_SWITCH\" INTEGER NOT NULL );"); // 69: midDropDoorUpSwitch
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MACHINE_STATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MachineState entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String machineID = entity.getMachineID();
        if (machineID != null) {
            stmt.bindString(2, machineID);
        }
        stmt.bindLong(3, entity.getVmState());
        stmt.bindLong(4, entity.getLeftState());
        stmt.bindLong(5, entity.getRightState());
        stmt.bindLong(6, entity.getLeftCabinetTemp());
        stmt.bindLong(7, entity.getLeftCabinetTopTemp());
        stmt.bindLong(8, entity.getLeftCompressorTemp());
        stmt.bindLong(9, entity.getLeftCompressorDCfanState());
        stmt.bindLong(10, entity.getLeftCabinetDCfanState());
        stmt.bindLong(11, entity.getLeftOutCabinetTemp());
        stmt.bindLong(12, entity.getLeftDoorheat());
        stmt.bindLong(13, entity.getLeftHumidity());
        stmt.bindLong(14, entity.getLeftLight());
        stmt.bindLong(15, entity.getLeftPushGoodsRaster());
        stmt.bindLong(16, entity.getLeftOutGoodsRaster());
        stmt.bindLong(17, entity.getLeftOutGoodsDoor());
        stmt.bindLong(18, entity.getRightCabinetTemp());
        stmt.bindLong(19, entity.getRightCabinetTopTemp());
        stmt.bindLong(20, entity.getRightCompressorTemp());
        stmt.bindLong(21, entity.getRightCompressorDCfanState());
        stmt.bindLong(22, entity.getRightCabinetDCfanState());
        stmt.bindLong(23, entity.getRightOutCabinetTemp());
        stmt.bindLong(24, entity.getRightDoorheat());
        stmt.bindLong(25, entity.getRightHumidity());
        stmt.bindLong(26, entity.getRightLight());
        stmt.bindLong(27, entity.getRightPushGoodsRaster());
        stmt.bindLong(28, entity.getRightOutGoodsRaster());
        stmt.bindLong(29, entity.getRightOutGoodsDoor());
        stmt.bindLong(30, entity.getMidLight());
        stmt.bindLong(31, entity.getMidDoorLock());
        stmt.bindLong(32, entity.getMidDoor());
        stmt.bindLong(33, entity.getMidGetGoodsRaster());
        stmt.bindLong(34, entity.getMidDropGoodsRaster());
        stmt.bindLong(35, entity.getMidAntiPinchHandRaster());
        stmt.bindLong(36, entity.getMidGetDoor());
        stmt.bindLong(37, entity.getMidDropDoor());
        stmt.bindLong(38, entity.getLeftTempControlAlternatPower());
        stmt.bindLong(39, entity.getLeftRefrigerationCompressorState());
        stmt.bindLong(40, entity.getLeftCompressorFanState());
        stmt.bindLong(41, entity.getLeftHeatingWireState());
        stmt.bindLong(42, entity.getLeftRecirculatAirFanState());
        stmt.bindLong(43, entity.getLeftLiftPlatformDownSwitch());
        stmt.bindLong(44, entity.getLeftLiftPlatformUpSwitch());
        stmt.bindLong(45, entity.getLeftLiftPlatformOutGoodsSwitch());
        stmt.bindLong(46, entity.getLeftOutGoodsRasterImmediately());
        stmt.bindLong(47, entity.getLeftPushGoodsRasterImmediately());
        stmt.bindLong(48, entity.getLeftMotorFeedbackState1());
        stmt.bindLong(49, entity.getLeftMotorFeedbackState2());
        stmt.bindLong(50, entity.getLeftOutGoodsDoorDownSwitch());
        stmt.bindLong(51, entity.getLeftOutGoodsDoorUpSwitch());
        stmt.bindLong(52, entity.getRightTempControlAlternatPower());
        stmt.bindLong(53, entity.getRightRefrigerationCompressorState());
        stmt.bindLong(54, entity.getRightCompressorFanState());
        stmt.bindLong(55, entity.getRightHeatingWireState());
        stmt.bindLong(56, entity.getRightRecirculatAirFanState());
        stmt.bindLong(57, entity.getRightLiftPlatformDownSwitch());
        stmt.bindLong(58, entity.getRightLiftPlatformUpSwitch());
        stmt.bindLong(59, entity.getRightLiftPlatformOutGoodsSwitch());
        stmt.bindLong(60, entity.getRightOutGoodsRasterImmediately());
        stmt.bindLong(61, entity.getRightPushGoodsRasterImmediately());
        stmt.bindLong(62, entity.getRightMotorFeedbackState1());
        stmt.bindLong(63, entity.getRightMotorFeedbackState2());
        stmt.bindLong(64, entity.getRightOutGoodsDoorDownSwitch());
        stmt.bindLong(65, entity.getRightOutGoodsDoorUpSwitch());
        stmt.bindLong(66, entity.getMidGetDoorWaitClose());
        stmt.bindLong(67, entity.getMidGetDoorDownSwitch());
        stmt.bindLong(68, entity.getMidGetDoorUpSwitch());
        stmt.bindLong(69, entity.getMidDropDoorDownSwitch());
        stmt.bindLong(70, entity.getMidDropDoorUpSwitch());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MachineState entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String machineID = entity.getMachineID();
        if (machineID != null) {
            stmt.bindString(2, machineID);
        }
        stmt.bindLong(3, entity.getVmState());
        stmt.bindLong(4, entity.getLeftState());
        stmt.bindLong(5, entity.getRightState());
        stmt.bindLong(6, entity.getLeftCabinetTemp());
        stmt.bindLong(7, entity.getLeftCabinetTopTemp());
        stmt.bindLong(8, entity.getLeftCompressorTemp());
        stmt.bindLong(9, entity.getLeftCompressorDCfanState());
        stmt.bindLong(10, entity.getLeftCabinetDCfanState());
        stmt.bindLong(11, entity.getLeftOutCabinetTemp());
        stmt.bindLong(12, entity.getLeftDoorheat());
        stmt.bindLong(13, entity.getLeftHumidity());
        stmt.bindLong(14, entity.getLeftLight());
        stmt.bindLong(15, entity.getLeftPushGoodsRaster());
        stmt.bindLong(16, entity.getLeftOutGoodsRaster());
        stmt.bindLong(17, entity.getLeftOutGoodsDoor());
        stmt.bindLong(18, entity.getRightCabinetTemp());
        stmt.bindLong(19, entity.getRightCabinetTopTemp());
        stmt.bindLong(20, entity.getRightCompressorTemp());
        stmt.bindLong(21, entity.getRightCompressorDCfanState());
        stmt.bindLong(22, entity.getRightCabinetDCfanState());
        stmt.bindLong(23, entity.getRightOutCabinetTemp());
        stmt.bindLong(24, entity.getRightDoorheat());
        stmt.bindLong(25, entity.getRightHumidity());
        stmt.bindLong(26, entity.getRightLight());
        stmt.bindLong(27, entity.getRightPushGoodsRaster());
        stmt.bindLong(28, entity.getRightOutGoodsRaster());
        stmt.bindLong(29, entity.getRightOutGoodsDoor());
        stmt.bindLong(30, entity.getMidLight());
        stmt.bindLong(31, entity.getMidDoorLock());
        stmt.bindLong(32, entity.getMidDoor());
        stmt.bindLong(33, entity.getMidGetGoodsRaster());
        stmt.bindLong(34, entity.getMidDropGoodsRaster());
        stmt.bindLong(35, entity.getMidAntiPinchHandRaster());
        stmt.bindLong(36, entity.getMidGetDoor());
        stmt.bindLong(37, entity.getMidDropDoor());
        stmt.bindLong(38, entity.getLeftTempControlAlternatPower());
        stmt.bindLong(39, entity.getLeftRefrigerationCompressorState());
        stmt.bindLong(40, entity.getLeftCompressorFanState());
        stmt.bindLong(41, entity.getLeftHeatingWireState());
        stmt.bindLong(42, entity.getLeftRecirculatAirFanState());
        stmt.bindLong(43, entity.getLeftLiftPlatformDownSwitch());
        stmt.bindLong(44, entity.getLeftLiftPlatformUpSwitch());
        stmt.bindLong(45, entity.getLeftLiftPlatformOutGoodsSwitch());
        stmt.bindLong(46, entity.getLeftOutGoodsRasterImmediately());
        stmt.bindLong(47, entity.getLeftPushGoodsRasterImmediately());
        stmt.bindLong(48, entity.getLeftMotorFeedbackState1());
        stmt.bindLong(49, entity.getLeftMotorFeedbackState2());
        stmt.bindLong(50, entity.getLeftOutGoodsDoorDownSwitch());
        stmt.bindLong(51, entity.getLeftOutGoodsDoorUpSwitch());
        stmt.bindLong(52, entity.getRightTempControlAlternatPower());
        stmt.bindLong(53, entity.getRightRefrigerationCompressorState());
        stmt.bindLong(54, entity.getRightCompressorFanState());
        stmt.bindLong(55, entity.getRightHeatingWireState());
        stmt.bindLong(56, entity.getRightRecirculatAirFanState());
        stmt.bindLong(57, entity.getRightLiftPlatformDownSwitch());
        stmt.bindLong(58, entity.getRightLiftPlatformUpSwitch());
        stmt.bindLong(59, entity.getRightLiftPlatformOutGoodsSwitch());
        stmt.bindLong(60, entity.getRightOutGoodsRasterImmediately());
        stmt.bindLong(61, entity.getRightPushGoodsRasterImmediately());
        stmt.bindLong(62, entity.getRightMotorFeedbackState1());
        stmt.bindLong(63, entity.getRightMotorFeedbackState2());
        stmt.bindLong(64, entity.getRightOutGoodsDoorDownSwitch());
        stmt.bindLong(65, entity.getRightOutGoodsDoorUpSwitch());
        stmt.bindLong(66, entity.getMidGetDoorWaitClose());
        stmt.bindLong(67, entity.getMidGetDoorDownSwitch());
        stmt.bindLong(68, entity.getMidGetDoorUpSwitch());
        stmt.bindLong(69, entity.getMidDropDoorDownSwitch());
        stmt.bindLong(70, entity.getMidDropDoorUpSwitch());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MachineState readEntity(Cursor cursor, int offset) {
        MachineState entity = new MachineState( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // machineID
            cursor.getInt(offset + 2), // vmState
            cursor.getInt(offset + 3), // leftState
            cursor.getInt(offset + 4), // rightState
            cursor.getInt(offset + 5), // leftCabinetTemp
            cursor.getInt(offset + 6), // leftCabinetTopTemp
            cursor.getInt(offset + 7), // leftCompressorTemp
            cursor.getInt(offset + 8), // leftCompressorDCfanState
            cursor.getInt(offset + 9), // leftCabinetDCfanState
            cursor.getInt(offset + 10), // leftOutCabinetTemp
            cursor.getInt(offset + 11), // leftDoorheat
            cursor.getInt(offset + 12), // leftHumidity
            cursor.getInt(offset + 13), // leftLight
            cursor.getInt(offset + 14), // leftPushGoodsRaster
            cursor.getInt(offset + 15), // leftOutGoodsRaster
            cursor.getInt(offset + 16), // leftOutGoodsDoor
            cursor.getInt(offset + 17), // rightCabinetTemp
            cursor.getInt(offset + 18), // rightCabinetTopTemp
            cursor.getInt(offset + 19), // rightCompressorTemp
            cursor.getInt(offset + 20), // rightCompressorDCfanState
            cursor.getInt(offset + 21), // rightCabinetDCfanState
            cursor.getInt(offset + 22), // rightOutCabinetTemp
            cursor.getInt(offset + 23), // rightDoorheat
            cursor.getInt(offset + 24), // rightHumidity
            cursor.getInt(offset + 25), // rightLight
            cursor.getInt(offset + 26), // rightPushGoodsRaster
            cursor.getInt(offset + 27), // rightOutGoodsRaster
            cursor.getInt(offset + 28), // rightOutGoodsDoor
            cursor.getInt(offset + 29), // midLight
            cursor.getInt(offset + 30), // midDoorLock
            cursor.getInt(offset + 31), // midDoor
            cursor.getInt(offset + 32), // midGetGoodsRaster
            cursor.getInt(offset + 33), // midDropGoodsRaster
            cursor.getInt(offset + 34), // midAntiPinchHandRaster
            cursor.getInt(offset + 35), // midGetDoor
            cursor.getInt(offset + 36), // midDropDoor
            cursor.getInt(offset + 37), // leftTempControlAlternatPower
            cursor.getInt(offset + 38), // leftRefrigerationCompressorState
            cursor.getInt(offset + 39), // leftCompressorFanState
            cursor.getInt(offset + 40), // leftHeatingWireState
            cursor.getInt(offset + 41), // leftRecirculatAirFanState
            cursor.getInt(offset + 42), // leftLiftPlatformDownSwitch
            cursor.getInt(offset + 43), // leftLiftPlatformUpSwitch
            cursor.getInt(offset + 44), // leftLiftPlatformOutGoodsSwitch
            cursor.getInt(offset + 45), // leftOutGoodsRasterImmediately
            cursor.getInt(offset + 46), // leftPushGoodsRasterImmediately
            cursor.getInt(offset + 47), // leftMotorFeedbackState1
            cursor.getInt(offset + 48), // leftMotorFeedbackState2
            cursor.getInt(offset + 49), // leftOutGoodsDoorDownSwitch
            cursor.getInt(offset + 50), // leftOutGoodsDoorUpSwitch
            cursor.getInt(offset + 51), // rightTempControlAlternatPower
            cursor.getInt(offset + 52), // rightRefrigerationCompressorState
            cursor.getInt(offset + 53), // rightCompressorFanState
            cursor.getInt(offset + 54), // rightHeatingWireState
            cursor.getInt(offset + 55), // rightRecirculatAirFanState
            cursor.getInt(offset + 56), // rightLiftPlatformDownSwitch
            cursor.getInt(offset + 57), // rightLiftPlatformUpSwitch
            cursor.getInt(offset + 58), // rightLiftPlatformOutGoodsSwitch
            cursor.getInt(offset + 59), // rightOutGoodsRasterImmediately
            cursor.getInt(offset + 60), // rightPushGoodsRasterImmediately
            cursor.getInt(offset + 61), // rightMotorFeedbackState1
            cursor.getInt(offset + 62), // rightMotorFeedbackState2
            cursor.getInt(offset + 63), // rightOutGoodsDoorDownSwitch
            cursor.getInt(offset + 64), // rightOutGoodsDoorUpSwitch
            cursor.getInt(offset + 65), // midGetDoorWaitClose
            cursor.getInt(offset + 66), // midGetDoorDownSwitch
            cursor.getInt(offset + 67), // midGetDoorUpSwitch
            cursor.getInt(offset + 68), // midDropDoorDownSwitch
            cursor.getInt(offset + 69) // midDropDoorUpSwitch
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MachineState entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMachineID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVmState(cursor.getInt(offset + 2));
        entity.setLeftState(cursor.getInt(offset + 3));
        entity.setRightState(cursor.getInt(offset + 4));
        entity.setLeftCabinetTemp(cursor.getInt(offset + 5));
        entity.setLeftCabinetTopTemp(cursor.getInt(offset + 6));
        entity.setLeftCompressorTemp(cursor.getInt(offset + 7));
        entity.setLeftCompressorDCfanState(cursor.getInt(offset + 8));
        entity.setLeftCabinetDCfanState(cursor.getInt(offset + 9));
        entity.setLeftOutCabinetTemp(cursor.getInt(offset + 10));
        entity.setLeftDoorheat(cursor.getInt(offset + 11));
        entity.setLeftHumidity(cursor.getInt(offset + 12));
        entity.setLeftLight(cursor.getInt(offset + 13));
        entity.setLeftPushGoodsRaster(cursor.getInt(offset + 14));
        entity.setLeftOutGoodsRaster(cursor.getInt(offset + 15));
        entity.setLeftOutGoodsDoor(cursor.getInt(offset + 16));
        entity.setRightCabinetTemp(cursor.getInt(offset + 17));
        entity.setRightCabinetTopTemp(cursor.getInt(offset + 18));
        entity.setRightCompressorTemp(cursor.getInt(offset + 19));
        entity.setRightCompressorDCfanState(cursor.getInt(offset + 20));
        entity.setRightCabinetDCfanState(cursor.getInt(offset + 21));
        entity.setRightOutCabinetTemp(cursor.getInt(offset + 22));
        entity.setRightDoorheat(cursor.getInt(offset + 23));
        entity.setRightHumidity(cursor.getInt(offset + 24));
        entity.setRightLight(cursor.getInt(offset + 25));
        entity.setRightPushGoodsRaster(cursor.getInt(offset + 26));
        entity.setRightOutGoodsRaster(cursor.getInt(offset + 27));
        entity.setRightOutGoodsDoor(cursor.getInt(offset + 28));
        entity.setMidLight(cursor.getInt(offset + 29));
        entity.setMidDoorLock(cursor.getInt(offset + 30));
        entity.setMidDoor(cursor.getInt(offset + 31));
        entity.setMidGetGoodsRaster(cursor.getInt(offset + 32));
        entity.setMidDropGoodsRaster(cursor.getInt(offset + 33));
        entity.setMidAntiPinchHandRaster(cursor.getInt(offset + 34));
        entity.setMidGetDoor(cursor.getInt(offset + 35));
        entity.setMidDropDoor(cursor.getInt(offset + 36));
        entity.setLeftTempControlAlternatPower(cursor.getInt(offset + 37));
        entity.setLeftRefrigerationCompressorState(cursor.getInt(offset + 38));
        entity.setLeftCompressorFanState(cursor.getInt(offset + 39));
        entity.setLeftHeatingWireState(cursor.getInt(offset + 40));
        entity.setLeftRecirculatAirFanState(cursor.getInt(offset + 41));
        entity.setLeftLiftPlatformDownSwitch(cursor.getInt(offset + 42));
        entity.setLeftLiftPlatformUpSwitch(cursor.getInt(offset + 43));
        entity.setLeftLiftPlatformOutGoodsSwitch(cursor.getInt(offset + 44));
        entity.setLeftOutGoodsRasterImmediately(cursor.getInt(offset + 45));
        entity.setLeftPushGoodsRasterImmediately(cursor.getInt(offset + 46));
        entity.setLeftMotorFeedbackState1(cursor.getInt(offset + 47));
        entity.setLeftMotorFeedbackState2(cursor.getInt(offset + 48));
        entity.setLeftOutGoodsDoorDownSwitch(cursor.getInt(offset + 49));
        entity.setLeftOutGoodsDoorUpSwitch(cursor.getInt(offset + 50));
        entity.setRightTempControlAlternatPower(cursor.getInt(offset + 51));
        entity.setRightRefrigerationCompressorState(cursor.getInt(offset + 52));
        entity.setRightCompressorFanState(cursor.getInt(offset + 53));
        entity.setRightHeatingWireState(cursor.getInt(offset + 54));
        entity.setRightRecirculatAirFanState(cursor.getInt(offset + 55));
        entity.setRightLiftPlatformDownSwitch(cursor.getInt(offset + 56));
        entity.setRightLiftPlatformUpSwitch(cursor.getInt(offset + 57));
        entity.setRightLiftPlatformOutGoodsSwitch(cursor.getInt(offset + 58));
        entity.setRightOutGoodsRasterImmediately(cursor.getInt(offset + 59));
        entity.setRightPushGoodsRasterImmediately(cursor.getInt(offset + 60));
        entity.setRightMotorFeedbackState1(cursor.getInt(offset + 61));
        entity.setRightMotorFeedbackState2(cursor.getInt(offset + 62));
        entity.setRightOutGoodsDoorDownSwitch(cursor.getInt(offset + 63));
        entity.setRightOutGoodsDoorUpSwitch(cursor.getInt(offset + 64));
        entity.setMidGetDoorWaitClose(cursor.getInt(offset + 65));
        entity.setMidGetDoorDownSwitch(cursor.getInt(offset + 66));
        entity.setMidGetDoorUpSwitch(cursor.getInt(offset + 67));
        entity.setMidDropDoorDownSwitch(cursor.getInt(offset + 68));
        entity.setMidDropDoorUpSwitch(cursor.getInt(offset + 69));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MachineState entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MachineState entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MachineState entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
