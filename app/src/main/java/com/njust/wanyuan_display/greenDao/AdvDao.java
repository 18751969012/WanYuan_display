package com.njust.wanyuan_display.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADV".
*/
public class AdvDao extends AbstractDao<Adv, Long> {

    public static final String TABLENAME = "ADV";

    /**
     * Properties of entity Adv.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AdId = new Property(1, String.class, "adId", false, "AD_ID");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property LocalUrl = new Property(3, String.class, "localUrl", false, "LOCAL_URL");
        public final static Property AdType = new Property(4, int.class, "adType", false, "AD_TYPE");
        public final static Property PlayTime = new Property(5, String.class, "playTime", false, "PLAY_TIME");
        public final static Property Duration = new Property(6, long.class, "duration", false, "DURATION");
        public final static Property Download = new Property(7, String.class, "download", false, "DOWNLOAD");
        public final static Property BuildTime = new Property(8, String.class, "buildTime", false, "BUILD_TIME");
    }


    public AdvDao(DaoConfig config) {
        super(config);
    }
    
    public AdvDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADV\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AD_ID\" TEXT NOT NULL UNIQUE ," + // 1: adId
                "\"URL\" TEXT," + // 2: url
                "\"LOCAL_URL\" TEXT," + // 3: localUrl
                "\"AD_TYPE\" INTEGER NOT NULL ," + // 4: adType
                "\"PLAY_TIME\" TEXT," + // 5: playTime
                "\"DURATION\" INTEGER NOT NULL ," + // 6: duration
                "\"DOWNLOAD\" TEXT," + // 7: download
                "\"BUILD_TIME\" TEXT);"); // 8: buildTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADV\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Adv entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAdId());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String localUrl = entity.getLocalUrl();
        if (localUrl != null) {
            stmt.bindString(4, localUrl);
        }
        stmt.bindLong(5, entity.getAdType());
 
        String playTime = entity.getPlayTime();
        if (playTime != null) {
            stmt.bindString(6, playTime);
        }
        stmt.bindLong(7, entity.getDuration());
 
        String download = entity.getDownload();
        if (download != null) {
            stmt.bindString(8, download);
        }
 
        String buildTime = entity.getBuildTime();
        if (buildTime != null) {
            stmt.bindString(9, buildTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Adv entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAdId());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String localUrl = entity.getLocalUrl();
        if (localUrl != null) {
            stmt.bindString(4, localUrl);
        }
        stmt.bindLong(5, entity.getAdType());
 
        String playTime = entity.getPlayTime();
        if (playTime != null) {
            stmt.bindString(6, playTime);
        }
        stmt.bindLong(7, entity.getDuration());
 
        String download = entity.getDownload();
        if (download != null) {
            stmt.bindString(8, download);
        }
 
        String buildTime = entity.getBuildTime();
        if (buildTime != null) {
            stmt.bindString(9, buildTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Adv readEntity(Cursor cursor, int offset) {
        Adv entity = new Adv( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // adId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // localUrl
            cursor.getInt(offset + 4), // adType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // playTime
            cursor.getLong(offset + 6), // duration
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // download
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // buildTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Adv entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdId(cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocalUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAdType(cursor.getInt(offset + 4));
        entity.setPlayTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDuration(cursor.getLong(offset + 6));
        entity.setDownload(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBuildTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Adv entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Adv entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Adv entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
